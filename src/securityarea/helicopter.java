/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package securityarea;

import javax.swing.JOptionPane;

/**
 *
 * @author iuhs
 */
public class helicopter extends javax.swing.JFrame implements observer{

     private Strength strength;
    /**
     * Creates new form helicopter
     */
    observable obj;
    String name;
    int fuel;
    int soldier;
    int ammoamount;
    int buttonenablevalue;
    public helicopter(observable obj,String name) {
        
        initComponents();
        this.obj=obj;
        this.name=name;
        
        jSpinner1.setValue(5);
        jSpinner2.setValue(10);
        Shoot.setEnabled(false);
        Missile_Operation.setEnabled(false);
        Laser_Operation.setEnabled(false);
        setVisible(true);
        
        
         this.strength = Strength.LOW;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        message = new javax.swing.JTextField();
        send = new javax.swing.JButton();
        position = new javax.swing.JCheckBox();
        Area_Not_Cleared = new javax.swing.JLabel();
        Soldier_Co = new javax.swing.JLabel();
        Shoot = new javax.swing.JButton();
        Missile_Operation = new javax.swing.JButton();
        Laser_Operation = new javax.swing.JButton();
        Ammo_Co = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        slider = new javax.swing.JSlider();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextFeild = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        send.setText("Send");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        position.setText("Position");

        Area_Not_Cleared.setText("Area Not Cleared");

        Soldier_Co.setText("Soldier Co...");

        Shoot.setText("Shoot");
        Shoot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShootActionPerformed(evt);
            }
        });

        Missile_Operation.setText("Missile Operation");

        Laser_Operation.setText("Laser Operation");

        Ammo_Co.setText("Ammo Co...");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel());
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jSpinner2.setModel(new javax.swing.SpinnerNumberModel());
        jSpinner2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner2StateChanged(evt);
            }
        });

        slider.setMajorTickSpacing(20);
        slider.setOrientation(javax.swing.JSlider.VERTICAL);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setToolTipText("");
        slider.setValue(100);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        TextFeild.setColumns(20);
        TextFeild.setRows(5);
        jScrollPane1.setViewportView(TextFeild);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(Area_Not_Cleared))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(Shoot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(Laser_Operation))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Missile_Operation)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(position))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(39, 39, 39)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(Ammo_Co)
                                            .addComponent(Soldier_Co))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jSpinner1, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                            .addComponent(jSpinner2))))
                                .addGap(30, 30, 30))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addGap(76, 76, 76)))
                        .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(send)
                        .addGap(40, 40, 40))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Area_Not_Cleared)
                                    .addComponent(Soldier_Co))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Shoot)
                                            .addComponent(Missile_Operation))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(Laser_Operation)
                                            .addComponent(position)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(Ammo_Co)))))
                        .addGap(34, 34, 34)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(send))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        // TODO add your handling code here:
        if(message.getText().equals("")){
             System.out.println("eoor");
        }
        else{
            //obj.msgall(message.getText(), name);
            obj.privatehelicopter(message.getText(), name);
        }
    }//GEN-LAST:event_sendActionPerformed

    
    private void ShootActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShootActionPerformed
        // TODO add your handling code here:
       int ammo = (Integer) jSpinner2.getValue()-1;
       if(ammo>0){
           jSpinner2.setValue(ammo);
       }
       else{
           int soldier = (Integer) jSpinner1.getValue()-1;
           int slidervalue = slider.getValue();
           slider.setValue(slidervalue-17);
           if(soldier>0){
           jSpinner1.setValue(soldier);
           jSpinner2.setValue(10);
       }
           else{
               jSpinner1.setValue(0);
               jSpinner2.setValue(0);
               slider.setValue(0);
               Shoot.setEnabled(false);
               Missile_Operation.setEnabled(false);
               Laser_Operation.setEnabled(false);
               send.setEnabled(false);
               JOptionPane.showMessageDialog(null, "Helicopter Destroyed.", "Plain", JOptionPane.PLAIN_MESSAGE);
           }
           
       }
       
    }//GEN-LAST:event_ShootActionPerformed

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        this.fuel=  (int) slider.getValue(); 
         obj.counthelicopter(soldier, ammoamount, fuel); 
         
          this.fuel=  (int) slider.getValue(); 
         obj.counttank(soldier, ammoamount, fuel); 
         
         if(fuel==0){obj.tankupdateStrengthText(name,"CLOSED");}
         if(fuel>=1 && fuel<40){obj.tankupdateStrengthText(name,"LOW");}
         if(fuel>=40 && fuel<60){obj.tankupdateStrengthText(name,"MEDIUM");}
         if(fuel>=60 && fuel<80){obj.tankupdateStrengthText(name,"HIGH");}
         if(fuel>=80){obj.tankupdateStrengthText(name,"STRONG");}
    }//GEN-LAST:event_sliderStateChanged

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        this.soldier=  (int) jSpinner1.getValue(); 
         obj.counthelicopter(soldier, ammoamount, fuel); 
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jSpinner2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner2StateChanged
        // TODO add your handling code here:
        this.ammoamount=  (int) jSpinner2.getValue(); 
         obj.counthelicopter(soldier, ammoamount, fuel); 
        
    }//GEN-LAST:event_jSpinner2StateChanged

         public void update(String msg,String msgername) {
        if(this.name.equals(msgername)){
         TextFeild.setText(TextFeild.getText()+"ME  : "+msg+"\n\n");   
        }
        else{
          TextFeild.setText(TextFeild.getText()+msgername+"  : "+msg+"\n\n");    
        }
    }
       @Override
    public void privatehelicopter(String text, String name) {
        
        
                  TextFeild.setText(TextFeild.getText()+name+"  (private message) : "+text+"\n\n");    
    }

    @Override
    public void privatetanke(String text, String name) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void privatesubmarine(String text, String name) {
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }   
  
 
  
    @Override
    public void counthelicopter(int soldier, int ammoamount, int fuel) {

         
    }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Ammo_Co;
    private javax.swing.JLabel Area_Not_Cleared;
    private javax.swing.JButton Laser_Operation;
    private javax.swing.JButton Missile_Operation;
    private javax.swing.JButton Shoot;
    private javax.swing.JLabel Soldier_Co;
    private javax.swing.JTextArea TextFeild;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTextField message;
    private javax.swing.JCheckBox position;
    private javax.swing.JButton send;
    private javax.swing.JSlider slider;
    // End of variables declaration//GEN-END:variables

    @Override
    public void areaclear(String area) {
        Area_Not_Cleared.setText(area);
        }

    @Override
    public void counttank(int soldier, int ammoamount, int fual) {
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void countsubmariene(int soldier, int ammoamount, int fual) {

    }


   
/*
    
     int soldier = (int) jSpinner1.getValue(); 
           int ammoamount = (int) jSpinner2.getValue();
           int fuel = slider.getValue();
            obj.counthelicopter(soldier, ammoamount, fuel); 
    */

    @Override
    public void buttonenable(int value) {
            this.buttonenablevalue=value;
            
            if(position.isSelected()){
                if(value>40){
            Shoot.setEnabled(true);
            }
            if(value>80){
            Missile_Operation.setEnabled(true);
            }
            if(value==100){
            Laser_Operation.setEnabled(true);
            }
            if(value<40){
                 Shoot.setEnabled(false);
                 Missile_Operation.setEnabled(false);
                Laser_Operation.setEnabled(false);
            }
            }
            
            
            

    }

    @Override
    public void helicopterupdateStrengthText(String name,String Strength) {
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void tankupdateStrengthText(String name,String Strength) {
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void submarineupdateStrengthText(String name,String Strength) {
       // throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

   
  
}
